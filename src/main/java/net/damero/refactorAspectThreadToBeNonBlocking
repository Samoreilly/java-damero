

ASPECT THREAD INTERCEPTOR SHOULD BE NON BLOCKING

APPROACH: CREATE A RETRYABLE TOPIC
-> When an event fails
-> Update its attempts counter + 1
-> Check if the counter is greater than the max attempts
-> If not, publish the event to a retry topic
-> If yes, publish the event to the dead letter topic


Im wondering if i should restructure my project scope/idea.
Currently im making a library that allows users to customise @KafkaLIstener by adding @CustomKafkaListener
with some metadata on top of kafkalistener. IT basically interecepts the method, the user can make custom dlq logic,
 retries, etc.

But im facing an issue now in integration testing where the user has to define alot of beans/config on there own side and it feels too complicated to setup test, even more so for the user id image. Currently the flow is like this KafkaListener method -> intercepted by aspectj method -> if fails -> goes to retry topic (Checks attempts, if attempts is greater than maxattempts, send to dlq) else add back into original kafka listener with incremented attempts. So im wondering if i should change my design, or what i should do. HEre a snippet of code: i dont want code btw just advice.


RETHOUGHT OUT DESIGN:
-> When an event fails
-> Update its attempts counter + 1
-> Check if the counter is greater than the max attempts
-> If not, publish the event back to the original topic with EventWrapper metadata ("attempts" = attempts + 1), topic etc
-> If yes, publish the event to the dead letter topic with custom EventWrapper metadata

